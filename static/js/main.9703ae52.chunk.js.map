{"version":3,"sources":["components/side-bar.jsx","serviceWorker.js","components/menu.jsx","index.js","App.js"],"names":["props","className","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Menu","Navbar","inverse","fixed","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","eventKey","Component","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0PAIe,WAAAA,GACb,OACE,kBAAC,QAAD,KACE,uBAAGC,UAAU,YAAYC,KAAK,KAA9B,QAIA,uBAAGD,UAAU,YAAYC,KAAK,WAA9B,UAIA,uBAAGD,UAAU,YAAYC,KAAK,WAA9B,gBAIA,uBAAGD,UAAU,YAAYC,KAAK,aAA9B,e,MCPN,IAAMC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,kECtElDC,E,iLArBX,OACE,kBAACC,EAAA,EAAD,CAAQC,SAAO,EAACC,OAAK,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QAClD,kBAACL,EAAA,EAAOM,MAAR,CAAclC,KAAK,SAAnB,eACA,kBAAC4B,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKxC,UAAU,WACb,kBAACwC,EAAA,EAAIC,KAAL,CAAUxC,KAAK,eAAf,cACA,kBAACuC,EAAA,EAAIC,KAAL,CAAUxC,KAAK,cAAf,cAEF,kBAACuC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CAAUxC,KAAK,YAAf,gBACA,kBAACuC,EAAA,EAAIC,KAAL,CAAUC,SAAU,EAAGzC,KAAK,YAA5B,qB,GAbO0C,aCOnBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,YAClDH,IAASC,OAAO,mBCND,WACb,OACE,yBAAKN,GAAG,OACN,kBAAC,EAAD,MACA,yBAAKA,GAAG,iBDEE,MAASO,SAASC,eAAe,QFW1C,SAAkBrC,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqC,IAAIC,wBAAwB7C,OAAOC,SAASJ,MACpDiD,SAAW9C,OAAOC,SAAS6C,OAIvC,OAGF9C,OAAO+C,iBAAiB,QAAQ,WAC9B,IAAM1C,EAAK,UAAMwC,wBAAN,sBAEP/C,IAgEV,SAAiCO,EAAOC,GAEtC0C,MAAM3C,GACHK,MAAK,SAAAuC,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/C,UAAUC,cAAc+C,MAAM7C,MAAK,SAAAC,GACjCA,EAAa6C,aAAa9C,MAAK,WAC7BV,OAAOC,SAASwD,eAKpBrD,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAuC,CAAwBrD,EAAOC,GAI/BC,UAAUC,cAAc+C,MAAM7C,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OEnC/BE,K","file":"static/js/main.9703ae52.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport { slide as Menu } from \"react-burger-menu\";\r\n\r\nexport default props => {\r\n  return (\r\n    <Menu>\r\n      <a className=\"menu-item\" href=\"/\">\r\n        Home\r\n      </a>\r\n\r\n      <a className=\"menu-item\" href=\"/galary\">\r\n        Galary\r\n      </a>\r\n\r\n      <a className=\"menu-item\" href=\"/social\">\r\n        Social Media\r\n      </a>\r\n\r\n      <a className=\"menu-item\" href=\"/reaction\">\r\n        React-ion\r\n      </a>\r\n\r\n      {/* <a className=\"menu-item\" href=\"/vue\">\r\n        Vue\r\n      </a>\r\n\r\n      <a className=\"menu-item\" href=\"/node\">\r\n        Node\r\n      </a> */}\r\n    </Menu>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\n\r\nclass Menu extends Component {\r\n  render() {\r\n    return (\r\n      <Navbar inverse fixed expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"#home\">Coach Buddy</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"#categories\">Categories</Nav.Link>\r\n            <Nav.Link href=\"#subscribe\">Subscribe</Nav.Link>\r\n          </Nav>\r\n          <Nav>\r\n            <Nav.Link href=\"#details\">More Details</Nav.Link>\r\n            <Nav.Link eventKey={2} href=\"#contact\">\r\n              Contact Us\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n//import Counters from \"./components/counters\";\r\nimport Menu from \"./components/menu\";\r\n\r\n//ReactDOM.render(<Counters />, document.getElementById(\"root\"));\r\nReactDOM.render(<Menu />, document.getElementById(\"menu_id\"));\r\nReactDOM.render(<App />, document.getElementById(\"app\"));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","import React from \"react\";\r\nimport SideBar from \"./components/side-bar\";\r\n\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div id=\"App\">\r\n      <SideBar />\r\n      <div id=\"page-wrap\"></div>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}