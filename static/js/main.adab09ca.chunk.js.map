{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/counters.jsx","components/menu.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Counter","count","id","handleIncrement","product","setState","classes","this","getBadgeClasses","className","formatCount","onClick","Component","Counters","counters","value","map","counter","key","Menu","Navbar","inverse","fixed","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","eventKey","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.adab09ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  state = {\n    count: 0,\n    // tags: [\"tags1\", \"tag2\", \"tag3\"],\n    id: 0\n  };\n\n  handleIncrement = product => {\n    console.log(product);\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    let classes = this.getBadgeClasses();\n    return (\n      <div>\n        <span className={classes}>{this.formatCount()}</span>\n\n        <button\n          onClick={() => this.handleIncrement(1)}\n          className=\"btn btn-secondary btn-lg m-2 pl-2\"\n        >\n          Increment Button\n        </button>\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"panel-title badge m-2 pl-6 badge-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    return this.state.count === 0 ? \"Zero\" : this.state.count;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 1, value: 0 },\n      { id: 1, value: 0 },\n      { id: 1, value: 0 }\n    ]\n  };\n  render() {\n    return (\n      <div>\n        {this.state.counters.map(counter => (\n          <Counter key={counter.id} value={counter.value} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport { Nav, NavItem, Navbar, Badge } from \"react-bootstrap\";\n\nclass Menu extends Component {\n  render() {\n    return (\n      <Navbar inverse fixed expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Coach Buddy</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#categories\">Categories</Nav.Link>\n            <Nav.Link href=\"#subscribe\">Subscribe</Nav.Link>\n          </Nav>\n          <Nav>\n            <Nav.Link href=\"#details\">More Details</Nav.Link>\n            <Nav.Link eventKey={2} href=\"#contact\">\n              Contact Us\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default Menu;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from \"./components/counters\";\nimport Menu from \"./components/menu\";\n\nReactDOM.render(<Counters />, document.getElementById(\"root\"));\nReactDOM.render(<Menu />, document.getElementById(\"menu_id\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}